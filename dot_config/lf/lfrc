# Merged with settings from: https://github.com/4volodin/dotfiles/blob/020e0bdb63709482277028b58db7055529af14be/.config/lf/lfrc

# interpreter for shell commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"
set filesep "\n"  # default already

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Configure UI
set hidden
set icons
set ignorecase true
set incsearch
set ratios '1:2:4'
set smartcase
set sortby natural
set tabstop 2

# Configure Previewer
set previewer ~/.config/lf/preview.sh
set preview true

# FYI: Removed because too easy to hit enter accidentally
# # use enter for shell commands
# map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# Utilize the "trash" utility installed with "brew install trash"
cmd trash %set -f; trash $fx
map <delete> trash
map <backspace2> trash

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# TODO: How do I get the nested e<> commands?
# # File Openers
# map ee $EDITOR "$f"
# map es $sudo $EDITOR "$f"

# Source: https://github.com/gokcehan/lf/wiki/Integrations#fzf
# You can bind keys in lf to your usual fzf commands:
map f $vi $(fzf)
# It is also possible to define commands with arguments to use with fzf:
cmd fzf $vi $(find . -name "$1" | fzf)
map f push :fzf<space>
# If you want to jump to a file or directory in lf using fuzzy matching, you can utilize fzf for this purpose:
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}
# I believe this is `Ctrl+f`
map <c-f> :fzf_jump
